from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column
import json

# revision identifiers, used by Alembic.
revision = 'b2bf5353a5b5'
down_revision = '847383d96a62'
branch_labels = None
depends_on = None

def upgrade():
    op.execute('DROP TABLE IF EXISTS _alembic_tmp_complete_trainings')

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('complete_trainings', schema=None) as batch_op:
        batch_op.add_column(sa.Column('training_id', sa.Integer(), nullable=False))
        batch_op.create_foreign_key('fk_complete_trainings_training_id', 'trainings', ['training_id'], ['id'])
        batch_op.drop_column('role_target')

    with op.batch_alter_table('event_logs', schema=None) as batch_op:
        batch_op.alter_column('department_id',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.Integer(),
               nullable=False)
        batch_op.create_foreign_key('fk_event_logs_department_id', 'departments', ['department_id'], ['id'])
        batch_op.drop_column('email_id')
  
    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('event_logs', schema=None) as batch_op:
        batch_op.add_column(sa.Column('email_id', sa.TEXT(length=255), nullable=True))
        batch_op.drop_constraint('fk_event_logs_department_id', type_='foreignkey')
        batch_op.alter_column('department_id',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(length=255),
               nullable=True)

    with op.batch_alter_table('complete_trainings', schema=None) as batch_op:
        batch_op.add_column(sa.Column('role_target', sa.VARCHAR(), nullable=False))
        batch_op.drop_constraint('fk_complete_trainings_training_id', type_='foreignkey')
        batch_op.drop_column('training_id')
 

    # ### end Alembic commands ###